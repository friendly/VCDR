# RStudio issues

- Bibliographies in knitr documents:
How can I get the compile PDF command for a knitr Rnw file to run bibtex
in an environment where it uses my localtexmf tree?

Following ideas from http://texblog.org/2013/08/20/rknitr-automatic-bibliography-generation-with-biblatex-in-rstudio/
I tried:
<<latex-seup, include=FALSE, cache=FALSE, echo=FALSE>>=
localtexmf <- "C:/Documents and Settings/friendly/My Documents/My Dropbox/localtexmf"
localtexmf <- "C:/Users/friendly/Dropbox/localtexmf"
Sys.setenv(TEXINPUTS=paste0(localtexmf, '/tex'),
           BIBINPUTS=paste0(localtexmf, '/bibtex/bib'),
           BSTINPUTS=paste0(localtexmf, '/bibtex/bst')
           )
@
But this doesn't seem to have any effect, and I can't tell that bibtex has been
run, of if there are any errors.  What exactly are the commands run by
CompilePDF?

######################################

- setting up github for an existing Rstudio project
I have an existing RStudio project (a book, using knitr) I want to set up to use github for version control.  If it makes any difference, the
project is currently stored in a Dropbox folder.

I've read the document Using Version Control with RStudio, set up my project to use git for version control, and created an empty github project, but there is something missing, because I can't find a way to push / commit to the github repo.

Under Project - Project options - SVN/Git I see the correct remote repo: git@github.com:friendly/VCDR.git, set up via

git remote add origin https://github.com/friendly/VCDR.git

In RStudio, I tried to use the Shell to execute

git push -u origin master

but I get
Permission denied (publickey)
fatal: Could not read from remote repository

I did setup a public/private key pair through some RStudio menu
option.

What can I do to make this work?

#####################################
- knit2pdf(): knit and latex passes

I'm now using `knit2pdf("book.Rnw", quiet=TRUE)` to compile a book project under
RStudio.  The knit step takes a long time (I'm not yet using caching), and when
there are new references, figures, cross-references, etc. it takes several
passes to resolve them, even if the .Rnw files haven't changed.

What I'd like is an equivalent or extension of knit2pdf which allows
either knit=FALSE to suppress the regeneration of the .tex file, or
an option latex.passes= to request additional runs of tools::texi2pdf.

I've looked at the code in knit2pdf, and it is a bit too opaque to allow
a simple patch for this functionality.

Answer:

knit2pdf_mod <- function(rnw_file, quiet=TRUE, latex.passes = 1) {
    knit2pdf(rnw_file, quiet=quiet )
    for (i in 1:latex.passes) {
#        texi2pdf(file = str_replace(rnw_file, pattern = "Rnw", replacement = "tex"))
        tools::texi2pdf(file = sub(pattern = "Rnw", replacement = "tex", rnw_file))
    }
}


- Compile pdflatex fails on badboxes, which are LaTeX warnings, not errors

- Is it possible to configure RStudio to allow more Formats to be shown/used
in Rnw/tex documents?  E.g., it would be nice to be able to add a template
for a figure or table environment.

- Plots shown in the Plots window are constrained by the window proportion
in relation to the rest of the RStudio window.  In an R console,  plots
are produced in a separate window that can be resized directly.  Is there
someway in RStudio to view a plot in an easily resized window?

- kniting an Rnw file opens the PDF in sumatraPDF, but attempting to print
the file from that application doesn't work.  I have to use 'Open with Adobe...'
and print from there.

- knit a notebook from an R script -- great facility, but why is there no way
to print from the notebook html file produced?


- In code chunks run with tidy=FALSE, I can't understand how lines are indented
in the latex output when I type leading tabs in the input. 

I'm using RStudio
with the settings: Insert spaces for tabs & tab setting = 2,
however code like the
following with leading tabs on all the indented lines,

<<titanic-eff2a>>=
titanic.eff2a <- allEffects(titanic.glm2,
  typical=median,
  given.values=c(pclass2nd=1/3, pclass3rd=1/3, sexmale=0.5)
    )
@

appears with the final two lines indented 8 spaces, but not the first, i.e., as

titanic.eff2a <- allEffects(titanic.glm2,
  typical=median,
        given.values=c(pclass2nd=1/3, pclass3rd=1/3, sexmale=0.5)
          )

Perhaps this is more an RStudio issue.  I'm well aware that Latex treats tabs in
verbatim code as 8 spaces.
########################################################
# knitr issues

- I'd like to have more control over the font size and line spacing used for 
code chunks and R output.  Using the default render_latex(), I see I can
set both globally using (in my premable)

\renewenvironment{knitrout}{\small\renewcommand{\baselinestretch}{.85}}{} 
...
\begin{document}

But, say there are chunks I'd like to print in \footnotesize, or customize in some other
way.  

Would it be easier to do this using render_listings() and the listings package?
Can I use custom chunk options and chunk hooks to do this?


- In code chunks run with tidy=FALSE, I can't understand how lines are indented
in the latex output when I type leading tabs in the input.  I'm using RStudio
with the settings Insert spaces for tabs & tab setting = 2, however code like the 
following

<<titanic-eff2a>>=
titanic.eff2a <- allEffects(titanic.glm2, 
  typical=median,
  given.values=c(pclass2nd=1/3, pclass3rd=1/3, sexmale=0.5)
	)
@

appears with the final two lines indented 8 spaces, i.e., as

titanic.eff2a <- allEffects(titanic.glm2, 
  typical=median,
        given.values=c(pclass2nd=1/3, pclass3rd=1/3, sexmale=0.5)
	      )

- In a top-level .Rnw file, opts_knit$set(progress = FALSE) suppresses the
progress info, however, when that instruction is used in a parent file,
via 
<<parent, include=FALSE>>=
set_parent("example-template.Rnw")
@
not only is progress turned on, but the console output is far more verbose,
showing all code chunks with lots of additional output, e.g.,

label: titanic-eff2-1 (with options) 
List of 1
 $ out.width: chr ".5\\linewidth"

   ~~~~~~~~~~~~~~~~~~~~~~~ R code chunk ~~~~~~~~~~~~~~~~~~~~~~~ 
   ticks <- list(at=c(.01, .05, seq(.1, .9, by=.2), .95, .99))
   plot(titanic.eff2[1], ticks=ticks, multiline=TRUE, ci.style="bars", key=list(x=.7, y=.95)) 
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
##------ Fri Sep 20 09:55:04 2013 ------##

  |...........................................................      |  90%
  ordinary text without R code

- console display of global and local chunk options:  Under Sweave, the
global and local chunk options are always integrated in the console output.
E.g., if I set echo=FALSE globally, that appears in the console output for
each chunk, unless overridden locall.  Under knitr, global chunk options
are not shown, so it is difficult to know what is in force for a given chunk.
Maybe this needs a different setting for verbose=.

- I can't quite figure out the interaction among fig.height, fig.width and
out.width as well as plot parameters for base plots (e.g., cex, lwd)
and ggplot() plots.
to produce plots in my document that look the same (same aspect
ratio, same relative sizing of text, points and lines) as they do when
I run them in an R console or in RStudio.


- BUG: How can I include a figure reference in the caption of another figure?
The following seems to fail with a LaTeX error

<<fig1, fig.cap='Plot of \\texttt{1:10}'>>=
plot(1:10)
@
<<fig2, fig.cap='The same plot shown in Figure \\ref{fig:fig1}'>>=
plot(1:10)
@

I also tried this using \\protect{\\ref{fig:fig1}}

The bug is in the composition of the short caption, a missing }:

\caption[The same plot shown in Figure \ref{fig]{The same plot shown in Figure \ref{fig:fig1}\label{fig:fig2}}
\end{figure}

- knitr: cache and git

